import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'course_detail_page.dart';

class LevelSelectionPage extends StatefulWidget {
  final int? unlockedLevel;
  const LevelSelectionPage({super.key, this.unlockedLevel});

  @override
  State<LevelSelectionPage> createState() => _LevelSelectionPageState();
}

class _LevelSelectionPageState extends State<LevelSelectionPage> {
  int unlockedLevel = 1;
  int xp = 0; // üîπ b·∫°n c√≥ th·ªÉ l∆∞u XP trong Firestore ƒë·ªÉ sync

  final List<Map<String, dynamic>> courses = const [
    {
      "title": "Beginner",
      "subtitle": "Ch∆∞a quen b·∫£ng ch·ªØ, c·∫ßn h·ªçc t·ª´ ƒë·∫ßu (‚âà d∆∞·ªõi N5)\n8 b√†i",
      "icon": Icons.school,
    },
    {
      "title": "Elementary",
      "subtitle": "Bi·∫øt ch·ªØ c√°i, t·ª´ c∆° b·∫£n (JLPT N5)\n20 b√†i",
      "icon": Icons.chat,
    },
    {
      "title": "Pre-Intermediate",
      "subtitle": "C√≥ v·ªën t·ª´, ng·ªØ ph√°p cƒÉn b·∫£n (JLPT N4)\n25 b√†i",
      "icon": Icons.text_fields,
    },
    {
      "title": "Intermediate",
      "subtitle": "N·∫Øm ch·∫Øc n·ªÅn t·∫£ng (JLPT N3)\n30 b√†i",
      "icon": Icons.business_center,
    },
  ];

  @override
  void initState() {
    super.initState();
    if (widget.unlockedLevel != null) {
      unlockedLevel = widget.unlockedLevel!;
    } else {
      _loadUnlockedLevel();
    }
  }

  /// üîπ L·∫•y d·ªØ li·ªáu unlockedLevel + XP t·ª´ Firestore
  Future<void> _loadUnlockedLevel() async {
    try {
      final uid = FirebaseAuth.instance.currentUser?.uid;
      if (uid == null) return;

      final doc = await FirebaseFirestore.instance
          .collection("users")
          .doc(uid)
          .get();

      if (doc.exists && doc.data() != null) {
        final data = doc.data()!;
        setState(() {
          unlockedLevel = (data["unlockedLevel"] ?? 1) as int;
          xp = (data["xp"] ?? 0) as int;
        });
      }
    } catch (e) {
      debugPrint("L·ªói load unlockedLevel: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    // üîπ T√≠nh progress d·ª±a tr√™n unlockedLevel (vd: 4 course => 25% m·ªói course)
    double progress = unlockedLevel / courses.length;
    if (progress > 1) progress = 1;

    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text(
          "Japanese Courses",
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Column(
        children: [
          // --- Header v·ªõi level, progress ---
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                const Text(
                  "Ë™ûË™û„Å¶„Å®„Çã",
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                const Text(
                  "Select a course to begin",
                  style: TextStyle(color: Colors.grey),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "Level $unlockedLevel",
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      "$xp XP",
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: LinearProgressIndicator(
                    value: progress,
                    color: Colors.orange,
                    backgroundColor: Colors.grey[300],
                    minHeight: 8,
                  ),
                ),
              ],
            ),
          ),

          // --- Grid Courses ---
          Expanded(
            child: GridView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: courses.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisExtent: 200,
                crossAxisSpacing: 14,
                mainAxisSpacing: 14,
              ),
              itemBuilder: (context, index) {
                var course = courses[index];
                bool isUnlocked = (index + 1) <= unlockedLevel;

                return Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.shade300,
                        blurRadius: 6,
                        offset: const Offset(2, 4),
                      ),
                    ],
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        course["icon"],
                        size: 50,
                        color: isUnlocked
                            ? Colors.orange
                            : Colors.grey.shade400,
                      ),
                      const SizedBox(height: 10),
                      Text(
                        course["title"],
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                          color: isUnlocked
                              ? Colors.black87
                              : Colors.grey.shade500,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 8),
                        child: Text(
                          course["subtitle"],
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 12,
                            color: isUnlocked
                                ? Colors.orange
                                : Colors.grey.shade400,
                          ),
                        ),
                      ),
                      const SizedBox(height: 10),
                      if (isUnlocked)
                        ElevatedButton(
                          onPressed: () {
                            List<String> lessons = [];

                            if (course["title"] == "Beginner") {
                              lessons = [
                                "Hiragana („ÅÇ‚Äì„Åä)",
                                "Hiragana („Åã‚Äì„Åì)",
                                "Katakana („Ç¢‚Äì„Ç™)",
                                "Ch√†o h·ªèi c∆° b·∫£n",
                                "S·ªë ƒë·∫øm 1‚Äì10",
                                "Th·ªùi gian & Ng√†y th√°ng",
                                "T·ª´ v·ª±ng gia ƒë√¨nh",
                                "√în t·∫≠p + Mini test",
                              ];
                            } else if (course["title"] == "Elementary") {
                              lessons = [
                                "Kanji c∆° b·∫£n (Êó•, Êúà, Â±±, Â∑ù)",
                                "T·ª´ v·ª±ng l·ªõp h·ªçc",
                                "Gi·ªõi thi·ªáu b·∫£n th√¢n",
                                "ƒê·ªông t·ª´ nh√≥m 1 ‚Äì „Åæ„ÅôÂΩ¢",
                                "M·∫´u c√¢u h·ªèi: ÔΩû„Åß„Åô„Åã",
                                "Th√¨ hi·ªán t·∫°i & qu√° kh·ª©",
                                "S·ªë ƒë·∫øm n√¢ng cao & tu·ªïi",
                                "T·ª´ v·ª±ng ƒë·ªông v·∫≠t",
                                "Kanji v·ªÅ con ng∆∞·ªùi (‰∫∫, Â•≥, Áî∑, Â≠ê)",
                                "T·ª´ v·ª±ng ngh·ªÅ nghi·ªáp",
                                "M·∫´u c√¢u s·ªü h·ªØu: ÔΩû„ÅÆÔΩû",
                                "ƒê·ªãa ƒëi·ªÉm: Â≠¶Ê†°, ÈäÄË°å, ÈßÖ",
                                "Ng·ªØ ph√°p so s√°nh c∆° b·∫£n",
                                "Th·ªùi gian trong ng√†y",
                                "ƒê·ªông t·ª´ nh√≥m 2 & 3",
                                "Th·ªÉ t·ª´ ƒëi·ªÉn (ËæûÊõ∏ÂΩ¢)",
                                "M·∫´u c√¢u ÔΩû„Åü„ÅÑ„Åß„Åô (mu·ªën l√†m)",
                                "Kanji ng√†y th√°ng (Âπ¥, ÊôÇ, ÂàÜ)",
                                "ƒê·ªçc ƒëo·∫°n vƒÉn ng·∫Øn",
                                "√în t·∫≠p + Test N5",
                              ];
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (_) => CourseDetailPage(
                                    courseTitle: course["title"],
                                    lessons: lessons,
                                  ),
                                ),
                              );
                            }
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(30),
                            ),
                          ),
                          child: const Text("Start"),
                        )
                      else
                        const Icon(Icons.lock, color: Colors.grey, size: 28),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
